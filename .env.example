#### IC WebSocket Gateway
# the url of the IC replica/subnet
IC_URL=https://icp0.io
# gateway to canister polling interval in milliseconds
POLLING_INTERVAL=100
# minimum interval between incoming messages in milliseconds
MIN_INCOMING_INTERVAL=100
# the public port where the gateway will listen
LISTEN_PORT=443
# the public domain name of the server
DOMAIN_NAME=icws.io
# the log configuration (can also be empty). See README.md for more details
RUST_LOG_FILE=ic_websocket_gateway=trace
RUST_LOG_STDOUT=ic_websocket_gateway=debug

## TELEMETRY CONFIG ##
# the following configurations are needed only when using the `telemetry-prod` or `telemetry-local` docker compose profiles
# the telemetry collector endpoint (leave empty to disable telemetry)
# if you're running the gateway from the docker-compose.yml file, you can use `otlp_collector` as the hostname
OPENTELEMETRY_COLLECTOR_ENDPOINT=grpc://otlp_collector:4317
# configure the telemetry trace level
RUST_LOG_TELEMETRY=ic_websocket_gateway=trace
# the info necessary to relay the telemetry traces to Grafana Tempo
# find how to set the following variables at: 
# https://medium.com/@rasnaut/the-easiest-way-to-send-traces-from-the-rust-app-to-grafana-cloud-7a66baf2e45b
# when using the `telemetry-prod` docker compose profile, set this to the Grafana Tempo endpoint
# when using the `telemetry-local` docker compose profile, set this to `tempo:4318`
GRAFANA_TEMPO_ENDPOINT=tempo:4318
# when using the `telemetry-prod` docker compose profile, set this to the access token obtained from Grafana Tempo, otherwise leave it empty or comment it out
GRAFANA_TEMPO_ACCESS_TOKEN=your_tempo_basic_auth_token
# when using the `telemetry-local` docker compose profile, set this to true, otherwise false
GRAFANA_TEMPO_LOCAL=false